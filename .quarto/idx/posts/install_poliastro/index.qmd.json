{"title":"Automating a Scientific Python Setup: A Gentle Walkthrough","markdown":{"yaml":{"title":"Automating a Scientific Python Setup: A Gentle Walkthrough","subtitle":"A shell script to set up poliastro and its dependencies","description":"The first in a series of posts on poliastro ‚Äì a Python library for visualizing and analyzing orbits in Python.","author":"Madhukara S Putty","date":"2025-06-25","categories":["orbital mechanics","scientific computing","poliastro","shell scripts"]},"headingText":"Introduction","containsRefs":false,"markdown":"\n\nSetting up scientific Python environments used to feel overwhelming to me‚Äîuntil\nI started collaborating with AI. With its help, I‚Äôve learned how to automate my\nsetup using shell scripts and gained confidence in managing the tools I use for\norbital mechanics and data visualization.\n\nIn this post, I‚Äôll walk you through a script that sets up a fully functional\nPython environment to work with Poliastro, a powerful library for orbital\nmechanics. Whether you're a beginner or someone looking to streamline your\nworkflow, this guide will give you both a working setup and an understanding of\nwhat each step does.\n\n## What We'll Do\nBy the end of this post, you‚Äôll know how to:\n\n* Write and run a basic shell script\n\n* Use conda to manage environments and packages\n\n* Install the correct versions of poliastro, astropy, and other tools\n\n* Understand why versions matter in scientific computing\n\n## The Full Script (Preview)\nHere‚Äôs what you‚Äôll build and understand step by step. To get started, copy the\ncode below into a new file and save it as ```setup_orbitviz.sh```. This script\nwill automate the creation of your orbital mechanics Python environment.\n\n```bash\n#!/bin/bash\n\necho \"üõ∞Ô∏è  Creating conda environment 'orbitviz' with Python 3.10...\"\nconda create -y -n orbitviz python=3.10\n\necho \"üöÄ Activating environment (if this fails, activate manually)...\"\nconda activate orbitviz || source activate orbitviz\n\necho \"üî≠ Installing astropy 5.3...\"\nconda install -y -n orbitviz -c conda-forge astropy=5.3\n\necho \"üìà Installing matplotlib 3.5...\"\nconda install -y -n orbitviz matplotlib=3.5\n\necho \"üåå Installing poliastro (with all extras)...\"\nconda run -n orbitviz pip install poliastro[all]\n\necho \"üìì Installing JupyterLab...\"\nconda install -y -n orbitviz -c conda-forge jupyterlab\n\necho \"üé® Installing Plotly...\"\nconda install -y -n orbitviz -c plotly plotly\n\necho \"üßÆ Installing numpy, scipy, tqdm...\"\nconda install -y -n orbitviz numpy scipy tqdm\n\necho \"‚úÖ Setup complete. To activate the environment later, run: conda activate orbitviz\"\n```\n\n## Line-by-Line Explanation\n1. ```#!/bin/bash```\n\nThis is called a shebang. It tells the operating system:\n‚ÄúRun this file using the bash shell.‚Äù\n\nWithout this line, the system might not know how to run the script.\n\n2. ```echo```\n\nThe echo command prints messages to the terminal. It's a simple way to give\nfeedback while the script runs:\n\n```echo \"Creating environment...\"```\n\nYou‚Äôll often use this to keep the user informed of progress.\n\n3. ```conda create -y -n orbitviz python=3.10```\n\nLet‚Äôs break this down:\n\n```conda``` is a package and environment manager, especially useful for scientific work.\n\n```create``` tells it to make a new environment.\n\n```-n orbitviz``` gives the environment a name.\n\n```python=3.10``` installs Python 3.10 in that environment.\n\n```-y``` means ‚Äúyes to all prompts‚Äù ‚Äî it won‚Äôt ask for confirmation.\n\n**Why use environments?**\n\nThey keep your projects isolated. This way, a change in one project (e.g.\nupgrading NumPy) won‚Äôt break another.\n\n4. ```conda activate orbitviz || source activate orbitviz```\nThis tries to activate the environment so all future commands run inside it.\n\n```conda activate orbitviz```: Standard command for modern conda setups.\n\n```|| source activate orbitviz```: This part runs only if the first one fails\n(older conda versions).\n\n5. ```conda install -n orbitviz -c conda-forge astropy=5.3```\nThis installs a package called ```astropy``` from the conda-forge channel:\n\n```-n orbitviz```: Install into this environment.\n\n```-c conda-forge```: Use the ```conda-forge``` channel ‚Äî a community-driven source of scientific packages.\n\n```astropy=5.3```: Install exactly version 5.3.\n\nWhy a specific version? \nNot all versions of Astropy work well with Poliastro. Version pinning helps avoid compatibility issues.\n\nThis logic repeats for:\n\n```matplotlib=3.5```\n\n```jupyterlab```\n\n```plotly```\n\n```numpy```, ```scipy```, and ```tqdm```.\n\n6. ```conda run -n orbitviz pip install poliastro[all]```\n\nSometimes, we need ```pip``` to install packages from PyPI (Python Package Index).\n\n* ```conda run -n orbitviz```: Run a command inside the environment.\n\n* ```pip install poliastro[all]```: Install Poliastro and all its optional features.\n\n\n7. ```chmod +x setup_orbitviz.sh```\n\nBefore you run the script, you make it executable with:\n```\nchmod +x setup_orbitviz.sh\n```\n\n```chmod``` changes file permissions.\n\n```+x``` means ‚Äúmake this file executable.‚Äù\n\nNow you can run it as:\n```\n./setup_orbitviz.sh\n```\n\n## Why Do Versions Matter?\nScientific libraries like astropy, matplotlib, and poliastro evolve constantly.\nBut newer isn‚Äôt always better‚Äîespecially when libraries depend on each other.\n\nFor example:\n\n* Poliastro might rely on internal behavior of Astropy 5.3 that‚Äôs changed in 5.4.\n\n* Matplotlib might break visualization formatting if you jump versions.\n\nVersion pinning ensures a stable and predictable environment‚Äîwhich is critical\nwhen you‚Äôre doing simulations or research.\n\n## Want to try?\nHere's how you can run the whole thing:\n\n```bash\n# Make the script executable\nchmod +x setup_orbitviz.sh\n\n# Run it!\n./setup_orbitviz.sh\n```\n\nIf something fails (e.g. activation), try this manually:\n```bash\nconda activate orbitviz\n```\n\nAnd then:\n```bash\njupyterlab\n```\n\n## Summary\n* You learned how to write and run a bash script\n\n* Understood conda environments, channels, and version pinning\n\n* Set up a working Python lab for orbital mechanics in just a few commands\n\nIn the next post, we‚Äôll write our first orbit simulation using Poliastro. You‚Äôll\nbe able to compute orbital elements, propagate orbits, and visualize them in 3D.\n\n---\n\n***AI Attribution:***\n*This blog post is part of an ongoing experiment in human‚ÄìAI collaboration. The\nshell script presented here was generated by AI based on the author's request\nand intent. The initial draft of this article was also AI-assisted, with light\nhuman edits and review.*\n","srcMarkdownNoYaml":"\n## Introduction\n\nSetting up scientific Python environments used to feel overwhelming to me‚Äîuntil\nI started collaborating with AI. With its help, I‚Äôve learned how to automate my\nsetup using shell scripts and gained confidence in managing the tools I use for\norbital mechanics and data visualization.\n\nIn this post, I‚Äôll walk you through a script that sets up a fully functional\nPython environment to work with Poliastro, a powerful library for orbital\nmechanics. Whether you're a beginner or someone looking to streamline your\nworkflow, this guide will give you both a working setup and an understanding of\nwhat each step does.\n\n## What We'll Do\nBy the end of this post, you‚Äôll know how to:\n\n* Write and run a basic shell script\n\n* Use conda to manage environments and packages\n\n* Install the correct versions of poliastro, astropy, and other tools\n\n* Understand why versions matter in scientific computing\n\n## The Full Script (Preview)\nHere‚Äôs what you‚Äôll build and understand step by step. To get started, copy the\ncode below into a new file and save it as ```setup_orbitviz.sh```. This script\nwill automate the creation of your orbital mechanics Python environment.\n\n```bash\n#!/bin/bash\n\necho \"üõ∞Ô∏è  Creating conda environment 'orbitviz' with Python 3.10...\"\nconda create -y -n orbitviz python=3.10\n\necho \"üöÄ Activating environment (if this fails, activate manually)...\"\nconda activate orbitviz || source activate orbitviz\n\necho \"üî≠ Installing astropy 5.3...\"\nconda install -y -n orbitviz -c conda-forge astropy=5.3\n\necho \"üìà Installing matplotlib 3.5...\"\nconda install -y -n orbitviz matplotlib=3.5\n\necho \"üåå Installing poliastro (with all extras)...\"\nconda run -n orbitviz pip install poliastro[all]\n\necho \"üìì Installing JupyterLab...\"\nconda install -y -n orbitviz -c conda-forge jupyterlab\n\necho \"üé® Installing Plotly...\"\nconda install -y -n orbitviz -c plotly plotly\n\necho \"üßÆ Installing numpy, scipy, tqdm...\"\nconda install -y -n orbitviz numpy scipy tqdm\n\necho \"‚úÖ Setup complete. To activate the environment later, run: conda activate orbitviz\"\n```\n\n## Line-by-Line Explanation\n1. ```#!/bin/bash```\n\nThis is called a shebang. It tells the operating system:\n‚ÄúRun this file using the bash shell.‚Äù\n\nWithout this line, the system might not know how to run the script.\n\n2. ```echo```\n\nThe echo command prints messages to the terminal. It's a simple way to give\nfeedback while the script runs:\n\n```echo \"Creating environment...\"```\n\nYou‚Äôll often use this to keep the user informed of progress.\n\n3. ```conda create -y -n orbitviz python=3.10```\n\nLet‚Äôs break this down:\n\n```conda``` is a package and environment manager, especially useful for scientific work.\n\n```create``` tells it to make a new environment.\n\n```-n orbitviz``` gives the environment a name.\n\n```python=3.10``` installs Python 3.10 in that environment.\n\n```-y``` means ‚Äúyes to all prompts‚Äù ‚Äî it won‚Äôt ask for confirmation.\n\n**Why use environments?**\n\nThey keep your projects isolated. This way, a change in one project (e.g.\nupgrading NumPy) won‚Äôt break another.\n\n4. ```conda activate orbitviz || source activate orbitviz```\nThis tries to activate the environment so all future commands run inside it.\n\n```conda activate orbitviz```: Standard command for modern conda setups.\n\n```|| source activate orbitviz```: This part runs only if the first one fails\n(older conda versions).\n\n5. ```conda install -n orbitviz -c conda-forge astropy=5.3```\nThis installs a package called ```astropy``` from the conda-forge channel:\n\n```-n orbitviz```: Install into this environment.\n\n```-c conda-forge```: Use the ```conda-forge``` channel ‚Äî a community-driven source of scientific packages.\n\n```astropy=5.3```: Install exactly version 5.3.\n\nWhy a specific version? \nNot all versions of Astropy work well with Poliastro. Version pinning helps avoid compatibility issues.\n\nThis logic repeats for:\n\n```matplotlib=3.5```\n\n```jupyterlab```\n\n```plotly```\n\n```numpy```, ```scipy```, and ```tqdm```.\n\n6. ```conda run -n orbitviz pip install poliastro[all]```\n\nSometimes, we need ```pip``` to install packages from PyPI (Python Package Index).\n\n* ```conda run -n orbitviz```: Run a command inside the environment.\n\n* ```pip install poliastro[all]```: Install Poliastro and all its optional features.\n\n\n7. ```chmod +x setup_orbitviz.sh```\n\nBefore you run the script, you make it executable with:\n```\nchmod +x setup_orbitviz.sh\n```\n\n```chmod``` changes file permissions.\n\n```+x``` means ‚Äúmake this file executable.‚Äù\n\nNow you can run it as:\n```\n./setup_orbitviz.sh\n```\n\n## Why Do Versions Matter?\nScientific libraries like astropy, matplotlib, and poliastro evolve constantly.\nBut newer isn‚Äôt always better‚Äîespecially when libraries depend on each other.\n\nFor example:\n\n* Poliastro might rely on internal behavior of Astropy 5.3 that‚Äôs changed in 5.4.\n\n* Matplotlib might break visualization formatting if you jump versions.\n\nVersion pinning ensures a stable and predictable environment‚Äîwhich is critical\nwhen you‚Äôre doing simulations or research.\n\n## Want to try?\nHere's how you can run the whole thing:\n\n```bash\n# Make the script executable\nchmod +x setup_orbitviz.sh\n\n# Run it!\n./setup_orbitviz.sh\n```\n\nIf something fails (e.g. activation), try this manually:\n```bash\nconda activate orbitviz\n```\n\nAnd then:\n```bash\njupyterlab\n```\n\n## Summary\n* You learned how to write and run a bash script\n\n* Understood conda environments, channels, and version pinning\n\n* Set up a working Python lab for orbital mechanics in just a few commands\n\nIn the next post, we‚Äôll write our first orbit simulation using Poliastro. You‚Äôll\nbe able to compute orbital elements, propagate orbits, and visualize them in 3D.\n\n---\n\n***AI Attribution:***\n*This blog post is part of an ongoing experiment in human‚ÄìAI collaboration. The\nshell script presented here was generated by AI based on the author's request\nand intent. The initial draft of this article was also AI-assisted, with light\nhuman edits and review.*\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.31","theme":["cosmo","brand"],"title-block-banner":true,"title":"Automating a Scientific Python Setup: A Gentle Walkthrough","subtitle":"A shell script to set up poliastro and its dependencies","description":"The first in a series of posts on poliastro ‚Äì a Python library for visualizing and analyzing orbits in Python.","author":"Madhukara S Putty","date":"2025-06-25","categories":["orbital mechanics","scientific computing","poliastro","shell scripts"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}